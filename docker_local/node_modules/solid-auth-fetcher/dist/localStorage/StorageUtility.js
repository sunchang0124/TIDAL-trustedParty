"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const validateSchema_1 = __importDefault(require("../util/validateSchema"));
let StorageUtility = class StorageUtility {
    constructor(storage) {
        this.storage = storage;
    }
    getKey(userId) {
        return `solidAuthFetcherUser:${userId}`;
    }
    async getUserData(userId) {
        const stored = await this.storage.get(this.getKey(userId));
        if (stored === null) {
            return {};
        }
        try {
            return JSON.parse(stored);
        }
        catch (err) {
            return {};
        }
    }
    async setUserData(userId, data) {
        await this.storage.set(this.getKey(userId), JSON.stringify(data));
    }
    async get(key, errorIfNull) {
        const value = await this.storage.get(key);
        if (value == null && errorIfNull) {
            throw new Error(`${key} is not stored`);
        }
        return value;
    }
    async set(key, value) {
        return this.storage.set(key, value);
    }
    async delete(key) {
        return this.storage.delete(key);
    }
    async getForUser(userId, key, errorIfNull) {
        const userData = await this.getUserData(userId);
        let value;
        if (!userData[key]) {
            value = null;
        }
        value = userData[key];
        if (value == null && errorIfNull) {
            throw new Error(`Field ${key} for user ${userId} is not stored`);
        }
        return value || null;
    }
    async setForUser(userId, key, value) {
        const userData = await this.getUserData(userId);
        userData[key] = value;
        await this.setUserData(userId, userData);
    }
    async deleteForUser(userId, key) {
        const userData = await this.getUserData(userId);
        delete userData[key];
        await this.setUserData(userId, userData);
    }
    async deleteAllUserData(userId) {
        await this.storage.delete(this.getKey(userId));
    }
    async safeGet(key, options = {}) {
        const locallyStored = options.userId
            ? await this.getForUser(options.userId, key)
            : await this.get(key);
        if (locallyStored) {
            try {
                const parsedObject = JSON.parse(locallyStored);
                if (options.schema) {
                    const val = validateSchema_1.default(options.schema, parsedObject);
                    return val;
                }
                return parsedObject;
            }
            catch (err) {
                if (options.userId) {
                    await this.deleteForUser(options.userId, key);
                }
                else {
                    await this.delete(key);
                }
            }
        }
        return null;
    }
};
StorageUtility = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("storage")),
    __metadata("design:paramtypes", [Object])
], StorageUtility);
exports.default = StorageUtility;
//# sourceMappingURL=StorageUtility.js.map