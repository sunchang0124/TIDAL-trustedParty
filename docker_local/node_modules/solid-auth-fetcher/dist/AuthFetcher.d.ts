/// <reference types="node" />
import ISolidSession from "./solidSession/ISolidSession";
import ILoginInputOptions from "./ILoginInputOptions";
import ILoginHandler from "./login/ILoginHandler";
import IRedirectHandler from "./login/oidc/redirectHandler/IRedirectHandler";
import ILogoutHandler from "./logout/ILogoutHandler";
import { ISessionCreator } from "./solidSession/SessionCreator";
import IAuthenticatedFetcher from "./authenticatedFetch/IAuthenticatedFetcher";
import { IEnvironmentDetector } from "./util/EnvironmentDetector";
import { EventEmitter } from "events";
export default class AuthFetcher extends EventEmitter {
    private loginHandler;
    private redirectHandler;
    private logoutHandler;
    private sessionCreator;
    private authenticatedFetcher;
    private environmentDetector;
    private globalUserName;
    constructor(loginHandler: ILoginHandler, redirectHandler: IRedirectHandler, logoutHandler: ILogoutHandler, sessionCreator: ISessionCreator, authenticatedFetcher: IAuthenticatedFetcher, environmentDetector: IEnvironmentDetector);
    private loginHelper;
    login(options: ILoginInputOptions): Promise<ISolidSession>;
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
    logout(): Promise<void>;
    getSession(): Promise<ISolidSession | null>;
    uniqueLogin(options: ILoginInputOptions): Promise<ISolidSession>;
    onSession(callback: (session: ISolidSession) => unknown): Promise<void>;
    onLogout(callback: (session: ISolidSession) => unknown): Promise<void>;
    onRequest(callback: (RequestInfo: RequestInfo, requestInit: RequestInit) => unknown): Promise<void>;
    handleRedirect(url: string): Promise<ISolidSession>;
    automaticallyHandleRedirect(): Promise<void>;
    customAuthFetcher(options: {}): unknown;
}
