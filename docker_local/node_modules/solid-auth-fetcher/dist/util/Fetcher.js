"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_parse_1 = __importDefault(require("url-parse"));
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("SolidAuthFetcher");
debug("Ready to roll");
class Fetcher {
    async fetch(url, init) {
        const fetchUrl = url instanceof url_parse_1.default ? url.toString() : url;
        const options = [];
        if (init) {
            if (init.method) {
                options.push(`-X '${init.method}'`);
            }
            if (init.body) {
                options.push(`-d '${init.body.toString().length > 1000
                    ? init.body.toString().substring(0, 100) + "..."
                    : init.body}'`);
            }
            if (init.headers) {
                if (Array.isArray(init.headers)) {
                    init.headers.forEach(pair => {
                        options.push(`-H '${pair[0]}: ${pair[1]}'`);
                    });
                }
                else {
                    Object.keys(init.headers).forEach(key => {
                        options.push(`-H '${key}: ${init.headers[key]}'`);
                    });
                }
            }
        }
        debug(`curl -v ${options.join(" ")} ${url}`);
        if (typeof window !== "undefined" && typeof window.fetch !== "undefined") {
            return window.fetch(fetchUrl, init);
        }
        return cross_fetch_1.default(fetchUrl, init);
    }
}
exports.default = Fetcher;
//# sourceMappingURL=Fetcher.js.map