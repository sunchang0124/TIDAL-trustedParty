import ISolidSession from "./solidSession/ISolidSession";
import ILoginInputOptions from "./ILoginInputOptions";
import AuthFetcher from "./AuthFetcher";
import IStorage from "./localStorage/IStorage";
export { getNodeSolidServerCookie, getPhpSolidServerCookie, getAuthFetcher, getAuthHeaders } from "./obtainAuthHeaders";
export interface ICustomAuthFetcherOptions {
    storage?: IStorage;
    doNotAutoHandleRedirect?: boolean;
}
export declare function customAuthFetcher(options?: ICustomAuthFetcherOptions): Promise<AuthFetcher>;
export declare function login(options: ILoginInputOptions): Promise<ISolidSession>;
export declare function fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
export declare function logout(): Promise<void>;
export declare function getSession(): Promise<ISolidSession | null>;
export declare function uniqueLogin(options: ILoginInputOptions): Promise<ISolidSession>;
export declare function onSession(callback: (session: ISolidSession) => unknown): Promise<void>;
export declare function onLogout(callback: (session: ISolidSession) => unknown): Promise<void>;
export declare function onRequest(callback: (url: RequestInfo, requestInit: RequestInit) => unknown): Promise<void>;
export declare function handleRedirect(url: string): Promise<ISolidSession>;
