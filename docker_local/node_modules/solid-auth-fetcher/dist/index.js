"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRedirect = exports.onRequest = exports.onLogout = exports.onSession = exports.uniqueLogin = exports.getSession = exports.logout = exports.fetch = exports.login = exports.customAuthFetcher = void 0;
const dependencies_1 = __importDefault(require("./dependencies"));
var obtainAuthHeaders_1 = require("./obtainAuthHeaders");
Object.defineProperty(exports, "getNodeSolidServerCookie", { enumerable: true, get: function () { return obtainAuthHeaders_1.getNodeSolidServerCookie; } });
Object.defineProperty(exports, "getPhpSolidServerCookie", { enumerable: true, get: function () { return obtainAuthHeaders_1.getPhpSolidServerCookie; } });
Object.defineProperty(exports, "getAuthFetcher", { enumerable: true, get: function () { return obtainAuthHeaders_1.getAuthFetcher; } });
Object.defineProperty(exports, "getAuthHeaders", { enumerable: true, get: function () { return obtainAuthHeaders_1.getAuthHeaders; } });
let redirectHandlerPromise;
let redirectHandlerPromiseIsResolved = false;
async function customAuthFetcher(options) {
    const authFetcher = dependencies_1.default({
        storage: options === null || options === void 0 ? void 0 : options.storage
    });
    if (!(options === null || options === void 0 ? void 0 : options.doNotAutoHandleRedirect)) {
        if (!redirectHandlerPromise) {
            redirectHandlerPromise = authFetcher.automaticallyHandleRedirect();
            await redirectHandlerPromise;
            redirectHandlerPromiseIsResolved = true;
        }
        else if (!redirectHandlerPromiseIsResolved) {
            await redirectHandlerPromise;
        }
    }
    return authFetcher;
}
exports.customAuthFetcher = customAuthFetcher;
let globalAuthFetcher;
async function getGlobalAuthFetcher(options) {
    if (globalAuthFetcher) {
        return globalAuthFetcher;
    }
    globalAuthFetcher = await customAuthFetcher(options);
    return globalAuthFetcher;
}
async function login(options) {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.login(options);
}
exports.login = login;
async function fetch(url, init) {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.fetch(url, init);
}
exports.fetch = fetch;
async function logout() {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.logout();
}
exports.logout = logout;
async function getSession() {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.getSession();
}
exports.getSession = getSession;
async function uniqueLogin(options) {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.uniqueLogin(options);
}
exports.uniqueLogin = uniqueLogin;
async function onSession(callback) {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.onSession(callback);
}
exports.onSession = onSession;
async function onLogout(callback) {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.onLogout(callback);
}
exports.onLogout = onLogout;
async function onRequest(callback) {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.onRequest(callback);
}
exports.onRequest = onRequest;
async function handleRedirect(url) {
    const authFetcher = await getGlobalAuthFetcher();
    return authFetcher.handleRedirect(url);
}
exports.handleRedirect = handleRedirect;
//# sourceMappingURL=index.js.map