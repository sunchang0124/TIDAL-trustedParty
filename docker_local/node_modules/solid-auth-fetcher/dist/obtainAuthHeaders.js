"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthHeaders = exports.getPhpSolidServerCookie = exports.getNodeSolidServerCookie = exports.getAuthFetcher = void 0;
const index_1 = require("./index");
const node_fetch_1 = __importDefault(require("node-fetch"));
const AuthFetcher_1 = __importDefault(require("./AuthFetcher"));
async function getAuthFetcher(oidcIssuer, oidcProviderCookie, appOrigin, allowUnauthenticated = true) {
    if (!oidcProviderCookie.length && allowUnauthenticated) {
        return { fetch: node_fetch_1.default };
    }
    const authFetcher = await index_1.customAuthFetcher();
    const session = await authFetcher.login({
        oidcIssuer,
        redirect: appOrigin
    });
    let redirectedTo = session.neededAction.redirectUrl;
    do {
        const result = await node_fetch_1.default(redirectedTo, {
            headers: { cookie: oidcProviderCookie },
            redirect: "manual"
        });
        redirectedTo = result.headers.get("location");
        if (redirectedTo === null) {
            throw new Error(`Please make sure the cookie is valid, and add "${appOrigin}" as a trusted app!`);
        }
    } while (!(redirectedTo === null || redirectedTo === void 0 ? void 0 : redirectedTo.startsWith(appOrigin)));
    await authFetcher.handleRedirect(redirectedTo);
    return authFetcher;
}
exports.getAuthFetcher = getAuthFetcher;
async function getNodeSolidServerCookie(serverRoot, username, password) {
    const authFetcher = await index_1.customAuthFetcher();
    const serverLoginResult = await authFetcher.fetch(`${serverRoot}/login/password`, {
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `username=${username}&password=${password}`,
        method: "POST",
        redirect: "manual"
    });
    return serverLoginResult.headers.get("set-cookie");
}
exports.getNodeSolidServerCookie = getNodeSolidServerCookie;
async function getPhpSolidServerCookie(serverRoot, username, password) {
    const authFetcher = await index_1.customAuthFetcher();
    const serverLoginResult = await authFetcher.fetch(`${serverRoot}/login`, {
        headers: {
            "content-type": "application/x-www-form-urlencoded"
        },
        body: `username=${username}&password=${password}`,
        method: "POST",
        redirect: "manual"
    });
    return serverLoginResult.headers.get("set-cookie");
}
exports.getPhpSolidServerCookie = getPhpSolidServerCookie;
async function getAuthHeaders(urlStr, method, authFetcher) {
    if (authFetcher instanceof AuthFetcher_1.default) {
        return {
            Authorization: JSON.parse(authFetcher.authenticatedFetcher.tokenRefresher.storageUtility
                .storage.map["solidAuthFetcherUser:global"]).accessToken,
            DPop: await authFetcher.authenticatedFetcher.tokenRefresher.tokenRequester.dpopHeaderCreator.createHeaderToken(new URL(urlStr), method)
        };
    }
    return {
        Authorization: "",
        DPop: ""
    };
}
exports.getAuthHeaders = getAuthHeaders;
//# sourceMappingURL=obtainAuthHeaders.js.map