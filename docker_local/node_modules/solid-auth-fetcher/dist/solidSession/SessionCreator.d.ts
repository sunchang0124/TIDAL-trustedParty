import INeededAction from "./INeededAction";
import ISolidSession from "./ISolidSession";
import { IUuidGenerator } from "../util/UuidGenerator";
import IAuthenticatedFetcher from "../authenticatedFetch/IAuthenticatedFetcher";
import ILogoutHandler from "../logout/ILogoutHandler";
import { IStorageUtility } from "../localStorage/StorageUtility";
export interface ISessionCreatorOptions {
    localUserId?: string;
    loggedIn: boolean;
    webId?: string;
    state?: string;
    neededAction?: INeededAction;
}
export interface ISessionCreator {
    create(options: ISessionCreatorOptions): ISolidSession;
    getSession(localUserId: string): Promise<ISolidSession | null>;
}
export default class SessionCreator implements ISessionCreator {
    private uuidGenerator;
    private authenticatedFetcher;
    private logoutHandler;
    private storageUtility;
    constructor(uuidGenerator: IUuidGenerator, authenticatedFetcher: IAuthenticatedFetcher, logoutHandler: ILogoutHandler, storageUtility: IStorageUtility);
    create(options: ISessionCreatorOptions): ISolidSession;
    getSession(localUserId: string): Promise<ISolidSession | null>;
}
