"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
let SessionCreator = class SessionCreator {
    constructor(uuidGenerator, authenticatedFetcher, logoutHandler, storageUtility) {
        this.uuidGenerator = uuidGenerator;
        this.authenticatedFetcher = authenticatedFetcher;
        this.logoutHandler = logoutHandler;
        this.storageUtility = storageUtility;
    }
    create(options) {
        const localUserId = options.localUserId || this.uuidGenerator.v4();
        if (options.loggedIn) {
            return {
                localUserId,
                loggedIn: true,
                webId: options.webId,
                neededAction: options.neededAction || { actionType: "inaction" },
                state: options.state,
                logout: async () => {
                    return this.logoutHandler.handle(localUserId);
                },
                fetch: (url, init) => {
                    return this.authenticatedFetcher.handle({
                        localUserId,
                        type: "dpop"
                    }, url, init);
                }
            };
        }
        else {
            return {
                localUserId,
                loggedIn: false,
                neededAction: options.neededAction || { actionType: "inaction" }
            };
        }
    }
    async getSession(localUserId) {
        const webId = await this.storageUtility.getForUser(localUserId, "webId");
        const accessToken = await this.storageUtility.getForUser(localUserId, "accessToken");
        if (webId) {
            return this.create({
                localUserId,
                webId: webId,
                loggedIn: !!accessToken
            });
        }
        return null;
    }
};
SessionCreator = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("uuidGenerator")),
    __param(1, tsyringe_1.inject("authenticatedFetcher")),
    __param(2, tsyringe_1.inject("logoutHandler")),
    __param(3, tsyringe_1.inject("storageUtility")),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], SessionCreator);
exports.default = SessionCreator;
//# sourceMappingURL=SessionCreator.js.map