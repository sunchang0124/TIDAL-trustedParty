"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const url_parse_1 = __importDefault(require("url-parse"));
let PopUpLoginHandler = class PopUpLoginHandler {
    constructor(environmentDetector, loginHandler, sessionCreator) {
        this.environmentDetector = environmentDetector;
        this.loginHandler = loginHandler;
        this.sessionCreator = sessionCreator;
    }
    async canHandle(loginOptions) {
        return !!(loginOptions.popUp &&
            loginOptions.popUpRedirectPath &&
            this.environmentDetector.detect() === "browser");
    }
    async handle(loginOptions) {
        const currentUrl = new url_parse_1.default(window.location.href);
        currentUrl.set("pathname", loginOptions.popUpRedirectPath);
        const session = await this.loginHandler.handle({
            ...loginOptions,
            redirect: currentUrl,
            doNotAutoRedirect: true
        });
        const popupWindow = window.open(session.neededAction.redirectUrl, "Log In", "resizable,scrollbars,width=500,height=500,");
        return new Promise((resolve, reject) => {
            const interval = setInterval(async () => {
                if (!popupWindow || popupWindow.closed) {
                    clearInterval(interval);
                    resolve((await this.sessionCreator.getSession(loginOptions.localUserId || "global")));
                }
            }, 500);
        });
    }
};
PopUpLoginHandler = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("environmentDetector")),
    __param(1, tsyringe_1.inject("postPopUpLoginHandler")),
    __param(2, tsyringe_1.inject("sessionCreator")),
    __metadata("design:paramtypes", [Object, Object, Object])
], PopUpLoginHandler);
exports.default = PopUpLoginHandler;
//# sourceMappingURL=PopUpLoginHandler.js.map