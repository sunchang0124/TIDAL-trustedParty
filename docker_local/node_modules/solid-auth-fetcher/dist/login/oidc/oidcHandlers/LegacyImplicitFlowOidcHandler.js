"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_parse_1 = __importDefault(require("url-parse"));
const tsyringe_1 = require("tsyringe");
let LegacyImplicitFlowOidcHandler = class LegacyImplicitFlowOidcHandler {
    constructor(fetcher, dpopHeaderCreator, sessionCreator) {
        this.fetcher = fetcher;
        this.dpopHeaderCreator = dpopHeaderCreator;
        this.sessionCreator = sessionCreator;
    }
    async canHandle(oidcLoginOptions) {
        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&
            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("implicit") > -1);
    }
    async handle(oidcLoginOptions) {
        const requestUrl = new url_parse_1.default(oidcLoginOptions.issuerConfiguration.authorizationEndpoint.toString());
        const query = {
            response_type: "id_token token",
            redirect_url: oidcLoginOptions.redirectUrl.toString(),
            scope: "openid id_vc"
        };
        if (oidcLoginOptions.dpop) {
            query.dpop = await this.dpopHeaderCreator.createHeaderToken(oidcLoginOptions.issuer, "GET");
        }
        requestUrl.set("query", query);
        return this.sessionCreator.create({
            neededAction: {
                actionType: "redirect",
                redirectUrl: requestUrl.toString()
            },
            loggedIn: false
        });
    }
};
LegacyImplicitFlowOidcHandler = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("fetcher")),
    __param(1, tsyringe_1.inject("dpopHeaderCreator")),
    __param(2, tsyringe_1.inject("sessionCreator")),
    __metadata("design:paramtypes", [Object, Object, Object])
], LegacyImplicitFlowOidcHandler);
exports.default = LegacyImplicitFlowOidcHandler;
//# sourceMappingURL=LegacyImplicitFlowOidcHandler.js.map