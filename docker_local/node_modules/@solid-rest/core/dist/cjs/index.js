"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _examineRequest = require("./examineRequest.js");

var _examineRequestedItem = require("./examineRequestedItem.js");

var _handleRequest = require("./handleRequest.js");

var _performRequestedMethod = _interopRequireDefault(require("./performRequestedMethod.js"));

var _handleResponse = require("./handleResponse.js");

var _utils = require("./utils/utils.js");

var _container = _interopRequireDefault(require("./utils/container.js"));

var _restPatch = _interopRequireDefault(require("./utils/rest-patch.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SolidRest {
  constructor(options) {
    options = options || {};

    if (!options.plugin) {
      console.log(`You must specify a plugin storage handler!`);
      process.exit(1);
    }

    this.storage = options.plugin;
    this.handleRequest = _handleRequest.handleRequest.bind(this);
    this.handleResponse = _handleResponse.handleResponse.bind(this);
    this.getItem = _examineRequestedItem.getItem.bind(this);
    this.getRequest = _examineRequest.getRequest.bind(this);
    this.perform = _performRequestedMethod.default.bind(this);
    this.isAuxResource = _utils.isAuxResource.bind(this);
    this.getAuxResources = _utils.getAuxResources.bind(this);
    this.getContentType = _utils.getContentType.bind(this);
    this.generateRandomSlug = _utils.generateRandomSlug.bind(this);
    this.createServerlessPod = _utils.createServerlessPod.bind(this);
    this.containerAsTurtle = _container.default.bind(this);
    let $rdf = options.parser ? options.parser : typeof window != "undefined" && window.$rdf ? window.$rdf : typeof global != "undefined" && global.$rdf ? global.$rdf : null;
    this.patch = options.patch = $rdf ? new _restPatch.default($rdf) : null;
  }

  async fetch(uri, options = {}) {
    let response = await this.handleRequest(uri, options);
    return await this.handleResponse(response, options);
  }

  async login(options) {
    options = {
      loginOptions: options,
      method: 'login'
    };
    let response = await this.handleRequest('http://example.org/', options);
    return await this.handleResponse(response, options);
  }

  async itemExists(pathname) {
    return await this.perform('ITEM_EXISTS', pathname);
  }

  isPatchConflictError(response) {
    if (response === 400) return true;
  }

  isAccessError(response) {
    if (response === 401) return true;
  }

} // THE END


exports.default = SolidRest;