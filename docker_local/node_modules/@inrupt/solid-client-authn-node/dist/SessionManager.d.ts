/// <reference types="node" />
import { EventEmitter } from "events";
import { IStorage } from "@inrupt/solid-client-authn-core";
import { Session } from "./Session";
export interface ISessionManagerOptions {
    secureStorage?: IStorage;
    insecureStorage?: IStorage;
}
export interface ISessionManager {
    getSession(sessionId?: string): Promise<Session>;
}
export declare class SessionManager extends EventEmitter implements ISessionManager {
    private clientAuthn;
    private sessionRecords;
    private isInitialized;
    private handledIncomingRedirect;
    constructor(options?: ISessionManagerOptions);
    private addNewSessionRecord;
    private getSessionFromCurrentSessionInfo;
    getSessions(): Promise<Session[]>;
    getSession(sessionId?: string): Promise<Session>;
    hasSession(sessionId: string): Promise<boolean>;
    onSessionLogin(callback: (session: Session) => unknown): void;
    onSessionLogout(callback: (session: Session) => unknown): void;
    detachSession(sessionId: string): void;
    handleIncomingRedirect(url: string): Promise<Session | undefined>;
}
