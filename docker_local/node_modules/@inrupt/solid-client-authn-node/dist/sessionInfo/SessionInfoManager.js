"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionInfoManager = exports.clear = exports.getUnauthenticatedSession = void 0;
const tsyringe_1 = require("tsyringe");
const uuid_1 = require("uuid");
const cross_fetch_1 = require("cross-fetch");
const constant_1 = require("../constant");
function getUnauthenticatedSession() {
    return {
        isLoggedIn: false,
        sessionId: uuid_1.v4(),
        fetch: cross_fetch_1.fetch,
    };
}
exports.getUnauthenticatedSession = getUnauthenticatedSession;
async function clear(sessionId, storage) {
    await Promise.all([
        storage.deleteAllUserData(sessionId, { secure: false }),
        storage.deleteAllUserData(sessionId, { secure: true }),
        storage.delete("clientKey", { secure: false }),
    ]);
}
exports.clear = clear;
let SessionInfoManager = class SessionInfoManager {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    update(_sessionId, _options) {
        throw new Error("Not Implemented");
    }
    async get(sessionId) {
        const webId = await this.storageUtility.getForUser(sessionId, "webId");
        const isLoggedIn = await this.storageUtility.getForUser(sessionId, "isLoggedIn");
        const refreshToken = await this.storageUtility.getForUser(sessionId, "refreshToken");
        const issuer = await this.storageUtility.getForUser(sessionId, "issuer");
        if (issuer !== undefined) {
            return {
                sessionId,
                webId,
                isLoggedIn: isLoggedIn === "true",
                refreshToken,
                issuer,
            };
        }
        return undefined;
    }
    async getAll() {
        throw new Error("Not implemented");
    }
    async clear(sessionId) {
        const rawSessions = await this.storageUtility.get(constant_1.KEY_REGISTERED_SESSIONS);
        if (rawSessions !== undefined) {
            const sessions = JSON.parse(rawSessions);
            await this.storageUtility.set(constant_1.KEY_REGISTERED_SESSIONS, JSON.stringify(sessions.filter((storedSessionId) => storedSessionId !== sessionId)));
        }
        return clear(sessionId, this.storageUtility);
    }
    async register(sessionId) {
        const rawSessions = await this.storageUtility.get(constant_1.KEY_REGISTERED_SESSIONS);
        if (rawSessions === undefined) {
            return this.storageUtility.set(constant_1.KEY_REGISTERED_SESSIONS, JSON.stringify([sessionId]));
        }
        const sessions = JSON.parse(rawSessions);
        if (!sessions.includes(sessionId)) {
            sessions.push(sessionId);
            return this.storageUtility.set(constant_1.KEY_REGISTERED_SESSIONS, JSON.stringify(sessions));
        }
        return Promise.resolve();
    }
    async getRegisteredSessionIdAll() {
        return this.storageUtility.get(constant_1.KEY_REGISTERED_SESSIONS).then((data) => {
            if (data === undefined) {
                return [];
            }
            return JSON.parse(data);
        });
    }
    async clearAll() {
        const rawSessions = await this.storageUtility.get(constant_1.KEY_REGISTERED_SESSIONS);
        if (rawSessions === undefined) {
            return Promise.resolve();
        }
        const sessions = JSON.parse(rawSessions);
        await Promise.all(sessions.map((sessionId) => this.clear(sessionId)));
        return this.storageUtility.set(constant_1.KEY_REGISTERED_SESSIONS, JSON.stringify([]));
    }
};
SessionInfoManager = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("storageUtility")),
    __metadata("design:paramtypes", [Object])
], SessionInfoManager);
exports.SessionInfoManager = SessionInfoManager;
//# sourceMappingURL=SessionInfoManager.js.map