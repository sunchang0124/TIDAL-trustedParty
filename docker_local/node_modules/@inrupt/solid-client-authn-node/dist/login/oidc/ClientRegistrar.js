"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const openid_client_1 = require("openid-client");
const IssuerConfigFetcher_1 = require("./IssuerConfigFetcher");
let ClientRegistrar = class ClientRegistrar {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    async getClient(options, issuerConfig) {
        var _a;
        const [storedClientId, storedClientSecret, storedClientName,] = await Promise.all([
            this.storageUtility.getForUser(options.sessionId, "clientId"),
            this.storageUtility.getForUser(options.sessionId, "clientSecret"),
            this.storageUtility.getForUser(options.sessionId, "clientName"),
        ]);
        if (storedClientId) {
            return {
                clientId: storedClientId,
                clientSecret: storedClientSecret,
                clientName: storedClientName,
            };
        }
        const extendedOptions = { ...options };
        extendedOptions.registrationAccessToken =
            (_a = extendedOptions.registrationAccessToken) !== null && _a !== void 0 ? _a : (await this.storageUtility.getForUser(options.sessionId, "registrationAccessToken"));
        const issuer = new openid_client_1.Issuer(IssuerConfigFetcher_1.configToIssuerMetadata(issuerConfig));
        if (issuer.metadata.registration_endpoint === undefined) {
            throw new solid_client_authn_core_1.ConfigurationError(`Dynamic client registration cannot be performed, because issuer does not have a registration endpoint: ${JSON.stringify(issuer.metadata)}`);
        }
        const registeredClient = await issuer.Client.register({
            redirect_uris: [options.redirectUrl],
            client_name: options.clientName,
        }, {
            initialAccessToken: extendedOptions.registrationAccessToken,
        });
        const infoToSave = {
            clientId: registeredClient.metadata.client_id,
        };
        if (registeredClient.metadata.client_secret) {
            infoToSave.clientSecret = registeredClient.metadata.client_secret;
        }
        await this.storageUtility.setForUser(extendedOptions.sessionId, infoToSave);
        return {
            clientId: registeredClient.metadata.client_id,
            clientSecret: registeredClient.metadata.client_secret,
            clientName: registeredClient.metadata.client_name,
        };
    }
};
ClientRegistrar = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("storageUtility")),
    __metadata("design:paramtypes", [Object])
], ClientRegistrar);
exports.default = ClientRegistrar;
//# sourceMappingURL=ClientRegistrar.js.map