"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const openid_client_1 = require("openid-client");
const IssuerConfigFetcher_1 = require("../IssuerConfigFetcher");
let TokenRefresher = class TokenRefresher {
    constructor(storageUtility, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async refresh(sessionId, refreshToken, dpopKey) {
        const oidcContext = await solid_client_authn_core_1.loadOidcContextFromStorage(sessionId, this.storageUtility, this.issuerConfigFetcher);
        const issuer = new openid_client_1.Issuer(IssuerConfigFetcher_1.configToIssuerMetadata(oidcContext.issuerConfig));
        const clientInfo = await this.clientRegistrar.getClient({ sessionId }, oidcContext.issuerConfig);
        const client = new issuer.Client({
            client_id: clientInfo.clientId,
            client_secret: clientInfo.clientSecret,
        });
        if (refreshToken === undefined) {
            throw new Error(`Session [${sessionId}] has no refresh token to allow it to refresh its access token.`);
        }
        if (oidcContext.dpop && dpopKey === undefined) {
            throw new Error(`For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`);
        }
        const tokenSet = await client.refresh(refreshToken, {
            DPoP: dpopKey === null || dpopKey === void 0 ? void 0 : dpopKey.toJWK(true),
        });
        if (tokenSet.access_token === undefined) {
            throw new Error(`The Identity Provider [${issuer.metadata.issuer}] did not return an access token on refresh.`);
        }
        if (tokenSet.refresh_token !== undefined) {
            await this.storageUtility.setForUser(sessionId, {
                refreshToken: tokenSet.refresh_token,
            });
        }
        return tokenSet;
    }
};
TokenRefresher = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("storageUtility")),
    __param(1, tsyringe_1.inject("issuerConfigFetcher")),
    __param(2, tsyringe_1.inject("clientRegistrar")),
    __metadata("design:paramtypes", [Object, Object, Object])
], TokenRefresher);
exports.default = TokenRefresher;
//# sourceMappingURL=TokenRefresher.js.map