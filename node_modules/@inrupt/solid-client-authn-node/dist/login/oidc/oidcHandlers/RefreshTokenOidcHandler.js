"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const jose_1 = require("jose");
const tsyringe_1 = require("tsyringe");
const fetchFactory_1 = require("../../../authenticatedFetch/fetchFactory");
const AuthCodeRedirectHandler_1 = require("../redirectHandler/AuthCodeRedirectHandler");
function validateOptions(oidcLoginOptions) {
    return (oidcLoginOptions.refreshToken !== undefined &&
        oidcLoginOptions.client.clientId !== undefined);
}
async function refreshAccess(refreshOptions, dpop) {
    var _a, _b;
    let authFetch;
    let tokens;
    let dpopKey;
    try {
        if (dpop) {
            dpopKey = await jose_1.JWK.generate("EC", "P-256");
            tokens = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken, dpopKey);
            const rotatedRefreshOptions = {
                ...refreshOptions,
                refreshToken: (_a = tokens.refresh_token) !== null && _a !== void 0 ? _a : refreshOptions.refreshToken,
            };
            authFetch = await fetchFactory_1.buildDpopFetch(tokens.access_token, dpopKey, rotatedRefreshOptions);
        }
        else {
            tokens = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken);
            const rotatedRefreshOptions = {
                ...refreshOptions,
                refreshToken: (_b = tokens.refresh_token) !== null && _b !== void 0 ? _b : refreshOptions.refreshToken,
            };
            authFetch = fetchFactory_1.buildBearerFetch(tokens.access_token, rotatedRefreshOptions);
        }
    }
    catch (e) {
        throw new Error(`Invalid refresh credentials: ${e.toString()}`);
    }
    return Object.assign(tokens, {
        fetch: authFetch,
    });
}
let RefreshTokenOidcHandler = class RefreshTokenOidcHandler {
    constructor(tokenRefresher, storageUtility) {
        this.tokenRefresher = tokenRefresher;
        this.storageUtility = storageUtility;
    }
    async canHandle(oidcLoginOptions) {
        return validateOptions(oidcLoginOptions);
    }
    async handle(oidcLoginOptions) {
        var _a;
        if (!(await this.canHandle(oidcLoginOptions))) {
            throw new Error(`RefreshTokenOidcHandler cannot handle the provided options, missing one of 'refreshToken', 'clientId' in: ${JSON.stringify(oidcLoginOptions)}`);
        }
        const refreshOptions = {
            refreshToken: oidcLoginOptions.refreshToken,
            sessionId: oidcLoginOptions.sessionId,
            tokenRefresher: this.tokenRefresher,
        };
        await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
            issuer: oidcLoginOptions.issuer,
            dpop: oidcLoginOptions.dpop ? "true" : "false",
            clientId: oidcLoginOptions.client.clientId,
            clientSecret: oidcLoginOptions.client.clientSecret,
        });
        const accessInfo = await refreshAccess(refreshOptions, oidcLoginOptions.dpop);
        const sessionInfo = {
            isLoggedIn: true,
            sessionId: oidcLoginOptions.sessionId,
        };
        if (accessInfo.id_token === undefined) {
            throw new Error(`The Identity Provider [${oidcLoginOptions.issuer}] did not return an ID token on refresh, which prevents us from getting the user's WebID.`);
        }
        sessionInfo.webId = await AuthCodeRedirectHandler_1.getWebidFromTokenPayload(accessInfo.claims());
        await solid_client_authn_core_1.saveSessionInfoToStorage(this.storageUtility, oidcLoginOptions.sessionId, undefined, undefined, "true", (_a = accessInfo.refresh_token) !== null && _a !== void 0 ? _a : refreshOptions.refreshToken);
        await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
            issuer: oidcLoginOptions.issuer,
            dpop: oidcLoginOptions.dpop ? "true" : "false",
            clientId: oidcLoginOptions.client.clientId,
        });
        if (oidcLoginOptions.client.clientSecret) {
            await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
                clientSecret: oidcLoginOptions.client.clientSecret,
            });
        }
        if (oidcLoginOptions.client.clientName) {
            await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
                clientName: oidcLoginOptions.client.clientName,
            });
        }
        return Object.assign(sessionInfo, {
            fetch: accessInfo.fetch,
        });
    }
};
RefreshTokenOidcHandler = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("tokenRefresher")),
    __param(1, tsyringe_1.inject("storageUtility")),
    __metadata("design:paramtypes", [Object, Object])
], RefreshTokenOidcHandler);
exports.default = RefreshTokenOidcHandler;
//# sourceMappingURL=RefreshTokenOidcHandler.js.map