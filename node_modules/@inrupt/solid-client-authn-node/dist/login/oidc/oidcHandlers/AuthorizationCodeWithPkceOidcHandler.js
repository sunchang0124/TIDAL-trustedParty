"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const openid_client_1 = require("openid-client");
const tsyringe_1 = require("tsyringe");
const IssuerConfigFetcher_1 = require("../IssuerConfigFetcher");
let AuthorizationCodeWithPkceOidcHandler = class AuthorizationCodeWithPkceOidcHandler {
    constructor(storageUtility, redirector) {
        this.storageUtility = storageUtility;
        this.redirector = redirector;
    }
    async canHandle(oidcLoginOptions) {
        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&
            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("authorization_code") > -1);
    }
    async handle(oidcLoginOptions) {
        const issuer = new openid_client_1.Issuer(IssuerConfigFetcher_1.configToIssuerMetadata(oidcLoginOptions.issuerConfiguration));
        const client = new issuer.Client({
            client_id: oidcLoginOptions.client.clientId,
            client_secret: oidcLoginOptions.client.clientSecret,
        });
        const codeVerifier = openid_client_1.generators.codeVerifier();
        const codeChallenge = openid_client_1.generators.codeChallenge(codeVerifier);
        const state = openid_client_1.generators.state();
        const targetUrl = client.authorizationUrl({
            code_challenge: codeChallenge,
            state,
            response_type: "code",
            redirect_uri: oidcLoginOptions.redirectUrl,
            code_challenge_method: "S256",
            scope: "openid offline_access",
        });
        await Promise.all([
            this.storageUtility.setForUser(state, {
                sessionId: oidcLoginOptions.sessionId,
            }),
            this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
                codeVerifier,
                issuer: oidcLoginOptions.issuer,
                redirectUrl: oidcLoginOptions.redirectUrl,
                dpop: oidcLoginOptions.dpop ? "true" : "false",
            }),
        ]);
        this.redirector.redirect(targetUrl, {
            handleRedirect: oidcLoginOptions.handleRedirect,
        });
        return undefined;
    }
};
AuthorizationCodeWithPkceOidcHandler = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("storageUtility")),
    __param(1, tsyringe_1.inject("redirector")),
    __metadata("design:paramtypes", [Object, Object])
], AuthorizationCodeWithPkceOidcHandler);
exports.default = AuthorizationCodeWithPkceOidcHandler;
//# sourceMappingURL=AuthorizationCodeWithPkceOidcHandler.js.map