"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
function hasIssuer(options) {
    return typeof options.oidcIssuer === "string";
}
let OidcLoginHandler = class OidcLoginHandler {
    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.oidcHandler = oidcHandler;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async canHandle(options) {
        return hasIssuer(options);
    }
    async handle(options) {
        var _a;
        if (!hasIssuer(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);
        }
        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);
        let clientInfo;
        if (options.clientId !== undefined) {
            clientInfo = {
                clientId: options.clientId,
                clientSecret: options.clientSecret,
                clientName: options.clientName,
            };
            await this.storageUtility.setForUser(options.sessionId, {
                clientId: options.clientId,
            });
            if (options.clientSecret) {
                await this.storageUtility.setForUser(options.sessionId, {
                    clientSecret: options.clientSecret,
                });
            }
            if (options.clientName) {
                await this.storageUtility.setForUser(options.sessionId, {
                    clientName: options.clientName,
                });
            }
        }
        else {
            clientInfo = await this.clientRegistrar.getClient(options, issuerConfig);
        }
        const oidcOptions = {
            issuer: issuerConfig.issuer,
            dpop: options.tokenType.toLowerCase() === "dpop",
            redirectUrl: options.redirectUrl,
            issuerConfiguration: issuerConfig,
            client: clientInfo,
            sessionId: options.sessionId,
            refreshToken: (_a = options.refreshToken) !== null && _a !== void 0 ? _a : (await this.storageUtility.getForUser(options.sessionId, "refreshToken")),
            handleRedirect: options.handleRedirect,
        };
        return this.oidcHandler.handle(oidcOptions);
    }
};
OidcLoginHandler = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("storageUtility")),
    __param(1, tsyringe_1.inject("oidcHandler")),
    __param(2, tsyringe_1.inject("issuerConfigFetcher")),
    __param(3, tsyringe_1.inject("clientRegistrar")),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], OidcLoginHandler);
exports.default = OidcLoginHandler;
//# sourceMappingURL=OidcLoginHandler.js.map