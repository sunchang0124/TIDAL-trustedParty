"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const cross_fetch_1 = require("cross-fetch");
let ClientAuthentication = class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager) {
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.login = async (sessionId, options) => {
            var _a, _b;
            await this.sessionInfoManager.register(sessionId);
            const loginReturn = await this.loginHandler.handle({
                sessionId,
                oidcIssuer: options.oidcIssuer,
                redirectUrl: options.redirectUrl
                    ? new URL(options.redirectUrl).href
                    : undefined,
                clientId: options.clientId,
                clientSecret: options.clientSecret,
                clientName: (_a = options.clientName) !== null && _a !== void 0 ? _a : options.clientId,
                popUp: options.popUp || false,
                refreshToken: options.refreshToken,
                handleRedirect: options.handleRedirect,
                tokenType: (_b = options.tokenType) !== null && _b !== void 0 ? _b : "DPoP",
            });
            if (loginReturn !== undefined) {
                this.fetch = loginReturn.fetch;
                return {
                    isLoggedIn: true,
                    sessionId,
                    webId: loginReturn.webId,
                };
            }
            return undefined;
        };
        this.fetch = cross_fetch_1.fetch;
        this.logout = async (sessionId) => {
            await this.logoutHandler.handle(sessionId);
            this.fetch = cross_fetch_1.fetch;
        };
        this.getSessionInfo = async (sessionId) => {
            return this.sessionInfoManager.get(sessionId);
        };
        this.getSessionIdAll = async () => {
            return this.sessionInfoManager.getRegisteredSessionIdAll();
        };
        this.registerSession = async (sessionId) => {
            return this.sessionInfoManager.register(sessionId);
        };
        this.clearSessionAll = async () => {
            return this.sessionInfoManager.clearAll();
        };
        this.getAllSessionInfo = async () => {
            return this.sessionInfoManager.getAll();
        };
        this.handleIncomingRedirect = async (url) => {
            const redirectInfo = await this.redirectHandler.handle(url);
            this.fetch = redirectInfo.fetch;
            return {
                isLoggedIn: redirectInfo.isLoggedIn,
                webId: redirectInfo.webId,
                sessionId: redirectInfo.sessionId,
            };
        };
    }
};
ClientAuthentication = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("loginHandler")),
    __param(1, tsyringe_1.inject("redirectHandler")),
    __param(2, tsyringe_1.inject("logoutHandler")),
    __param(3, tsyringe_1.inject("sessionInfoManager")),
    __metadata("design:paramtypes", [Object, Object, Object, Object])
], ClientAuthentication);
exports.default = ClientAuthentication;
//# sourceMappingURL=ClientAuthentication.js.map