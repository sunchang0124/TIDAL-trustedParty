"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionManager = void 0;
const events_1 = require("events");
const tsyringe_1 = require("tsyringe");
const Session_1 = require("./Session");
const dependencies_1 = require("./dependencies");
let SessionManager = class SessionManager extends events_1.EventEmitter {
    constructor(options = {}) {
        super();
        this.sessionRecords = {};
        this.isInitialized = false;
        this.handledIncomingRedirect = false;
        this.clientAuthn = dependencies_1.getClientAuthenticationWithDependencies({
            secureStorage: options.secureStorage,
            insecureStorage: options.insecureStorage,
        });
    }
    addNewSessionRecord(session) {
        const logoutCallback = () => {
            this.emit("sessionLogout", session);
        };
        session.onLogout(logoutCallback);
        this.sessionRecords[session.info.sessionId] = {
            session,
            logoutCallback,
        };
        return session;
    }
    getSessionFromCurrentSessionInfo(sessionInfo) {
        const sessionRecord = this.sessionRecords[sessionInfo.sessionId];
        if (sessionRecord) {
            sessionRecord.session.info.webId = sessionInfo.webId;
            sessionRecord.session.info.isLoggedIn = sessionInfo.isLoggedIn;
            return sessionRecord.session;
        }
        return this.addNewSessionRecord(new Session_1.Session({
            clientAuthentication: this.clientAuthn,
            sessionInfo,
        }));
    }
    async getSessions() {
        const sessionInfos = await this.clientAuthn.getAllSessionInfo();
        return sessionInfos.map((sessionInfo) => this.getSessionFromCurrentSessionInfo(sessionInfo));
    }
    async getSession(sessionId) {
        let session;
        if (sessionId) {
            const retrievedSessionInfo = await this.clientAuthn.getSessionInfo(sessionId);
            if (retrievedSessionInfo) {
                session = this.getSessionFromCurrentSessionInfo(retrievedSessionInfo);
            }
            else {
                session = this.addNewSessionRecord(new Session_1.Session({ clientAuthentication: this.clientAuthn }, sessionId));
            }
        }
        else {
            session = this.addNewSessionRecord(new Session_1.Session({ clientAuthentication: this.clientAuthn }));
        }
        return session;
    }
    async hasSession(sessionId) {
        return (await this.clientAuthn.getSessionInfo(sessionId)) !== undefined;
    }
    onSessionLogin(callback) {
        this.on("sessionLogin", callback);
    }
    onSessionLogout(callback) {
        this.on("sessionLogout", callback);
    }
    detachSession(sessionId) {
        const sessionRecord = this.sessionRecords[sessionId];
        if (sessionRecord) {
            sessionRecord.session.removeListener("onLogout", sessionRecord.logoutCallback);
            delete this.sessionRecords[sessionId];
        }
    }
    async handleIncomingRedirect(url) {
        const sessionInfo = await this.clientAuthn.handleIncomingRedirect(url);
        if (sessionInfo) {
            const session = this.getSessionFromCurrentSessionInfo(sessionInfo);
            this.emit("sessionLogin", session);
            session.emit("login");
            return session;
        }
        return undefined;
    }
};
SessionManager = __decorate([
    tsyringe_1.injectable(),
    __metadata("design:paramtypes", [Object])
], SessionManager);
exports.SessionManager = SessionManager;
//# sourceMappingURL=SessionManager.js.map