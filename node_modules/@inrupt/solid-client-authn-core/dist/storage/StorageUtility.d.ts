import IStorage from "./IStorage";
import IStorageUtility from "./IStorageUtility";
import { IIssuerConfig } from "../login/oidc/IIssuerConfig";
import { IIssuerConfigFetcher } from "../login/oidc/IIssuerConfigFetcher";
export declare type OidcContext = {
    issuerConfig: IIssuerConfig;
    codeVerifier?: string;
    redirectUrl?: string;
    dpop: boolean;
};
export declare function getSessionIdFromOauthState(storageUtility: IStorageUtility, oauthState: string): Promise<string | undefined>;
export declare function loadOidcContextFromStorage(sessionId: string, storageUtility: IStorageUtility, configFetcher: IIssuerConfigFetcher): Promise<OidcContext>;
export declare function saveSessionInfoToStorage(storageUtility: IStorageUtility, sessionId: string, idToken?: string, webId?: string, isLoggedIn?: string, refreshToken?: string, secure?: boolean): Promise<void>;
export declare type ResourceServerSession = {
    webId: string;
    sessions: Record<string, {
        expiration: number;
    }>;
};
export default class StorageUtility implements IStorageUtility {
    private secureStorage;
    private insecureStorage;
    constructor(secureStorage: IStorage, insecureStorage: IStorage);
    private getKey;
    private RESOURCE_SERVER_SESSION_INFORMATION_KEY;
    private getUserData;
    private setUserData;
    get(key: string, options?: {
        errorIfNull?: boolean;
        secure?: boolean;
    }): Promise<string | undefined>;
    set(key: string, value: string, options?: {
        secure?: boolean;
    }): Promise<void>;
    delete(key: string, options?: {
        secure?: boolean;
    }): Promise<void>;
    getForUser(userId: string, key: string, options?: {
        errorIfNull?: boolean;
        secure?: boolean;
    }): Promise<string | undefined>;
    setForUser(userId: string, values: Record<string, string>, options?: {
        secure?: boolean;
    }): Promise<void>;
    deleteForUser(userId: string, key: string, options?: {
        secure?: boolean;
    }): Promise<void>;
    deleteAllUserData(userId: string, options?: {
        secure?: boolean;
    }): Promise<void>;
    storeResourceServerSessionInfo(webId: string, resourceServerIri: string, expiration: number): Promise<void>;
    clearResourceServerSessionInfo(resourceServerIri: string): Promise<void>;
    safeGet(key: string, options?: {
        schema?: Record<string, unknown>;
        userId?: string;
        secure?: boolean;
    }): Promise<unknown | undefined>;
}
