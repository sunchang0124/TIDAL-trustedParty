"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ILoginInputOptions_1 = require("./ILoginInputOptions");
const tsyringe_1 = require("tsyringe");
const validateSchema_1 = __importDefault(require("./util/validateSchema"));
const events_1 = require("events");
let AuthFetcher = class AuthFetcher extends events_1.EventEmitter {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionCreator, authenticatedFetcher, environmentDetector) {
        super();
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionCreator = sessionCreator;
        this.authenticatedFetcher = authenticatedFetcher;
        this.environmentDetector = environmentDetector;
        this.globalUserName = "global";
    }
    async loginHelper(options, localUserId) {
        const internalOptions = validateSchema_1.default(ILoginInputOptions_1.loginInputOptionsSchema, options);
        if (localUserId) {
            internalOptions.localUserId = localUserId;
        }
        return this.loginHandler.handle(internalOptions);
    }
    async login(options) {
        return this.loginHelper(options, this.globalUserName);
    }
    async fetch(url, init) {
        this.emit("request", url, init);
        return this.authenticatedFetcher.handle({
            localUserId: this.globalUserName,
            type: "dpop"
        }, url, init);
    }
    async logout() {
        await this.logoutHandler.handle(this.globalUserName);
    }
    async getSession() {
        return this.sessionCreator.getSession(this.globalUserName);
    }
    async uniqueLogin(options) {
        return this.loginHelper(options);
    }
    async onSession(callback) {
        const currentSession = await this.getSession();
        if (currentSession) {
            callback(currentSession);
        }
        this.on("session", callback);
    }
    async onLogout(callback) {
        throw new Error("Not Implemented");
    }
    async onRequest(callback) {
        this.on("request", callback);
    }
    async handleRedirect(url) {
        const session = await this.redirectHandler.handle(url);
        this.emit("session", session);
        return session;
    }
    async automaticallyHandleRedirect() {
        if (this.environmentDetector.detect() === "browser") {
            await this.handleRedirect(window.location.href);
        }
    }
    customAuthFetcher(options) {
        throw new Error("Not Implemented");
    }
};
AuthFetcher = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("loginHandler")),
    __param(1, tsyringe_1.inject("redirectHandler")),
    __param(2, tsyringe_1.inject("logoutHandler")),
    __param(3, tsyringe_1.inject("sessionCreator")),
    __param(4, tsyringe_1.inject("authenticatedFetcher")),
    __param(5, tsyringe_1.inject("environmentDetector")),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object])
], AuthFetcher);
exports.default = AuthFetcher;
//# sourceMappingURL=AuthFetcher.js.map