import IStorage from "../localStorage/IStorage";
export interface IStorageUtility {
    get(key: string, errorIfNull?: true): Promise<string | null>;
    set(key: string, value: string): Promise<void>;
    delete(key: string): Promise<void>;
    getForUser(userId: string, key: string, errorIfNull?: true): Promise<string | null>;
    setForUser(userId: string, key: string, value: string): Promise<void>;
    deleteForUser(userId: string, key: string): Promise<void>;
    deleteAllUserData(userId: string): Promise<void>;
    safeGet(key: string, options?: Partial<{
        schema?: Record<string, any>;
        postProcess?: (retrievedObject: any) => any;
        userId?: string;
    }>): Promise<any | null>;
}
export default class StorageUtility implements IStorageUtility {
    private storage;
    constructor(storage: IStorage);
    private getKey;
    private getUserData;
    private setUserData;
    get(key: string, errorIfNull?: true): Promise<string | null>;
    set(key: string, value: string): Promise<void>;
    delete(key: string): Promise<void>;
    getForUser(userId: string, key: string, errorIfNull?: true): Promise<string | null>;
    setForUser(userId: string, key: string, value: string): Promise<void>;
    deleteForUser(userId: string, key: string): Promise<void>;
    deleteAllUserData(userId: string): Promise<void>;
    safeGet(key: string, options?: {
        schema?: Record<string, unknown>;
        userId?: string;
    }): Promise<unknown | null>;
}
