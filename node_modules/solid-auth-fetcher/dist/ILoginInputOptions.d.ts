declare type ILoginInputOptions = (IIssuerLoginInputOptions & IRedirectLoginInputOptions) | (IIssuerLoginInputOptions & IPopupLoginInputOptions) | (IWebIdLoginInputOptions & IRedirectLoginInputOptions) | (IWebIdLoginInputOptions & IPopupLoginInputOptions);
export default ILoginInputOptions;
export interface ICoreLoginInuptOptions {
    state?: string;
    clientId?: string;
    doNotAutoRedirect?: boolean;
    clientName?: string;
}
export interface IIssuerLoginInputOptions extends ICoreLoginInuptOptions {
    webId: string;
}
export interface IWebIdLoginInputOptions extends ICoreLoginInuptOptions {
    oidcIssuer: string;
}
export interface IRedirectLoginInputOptions extends ICoreLoginInuptOptions {
    redirect: string;
}
export interface IPopupLoginInputOptions extends ICoreLoginInuptOptions {
    popUp: boolean;
    popUpRedirectPath: string;
}
export declare const loginInputOptionsSchema: {
    type: string;
    properties: {
        oidcIssuer: {
            type: string;
            format: string;
            shouldConvertToUrl: boolean;
        };
        webId: {
            type: string;
            format: string;
            shouldConvertToUrl: boolean;
        };
        redirect: {
            type: string;
            format: string;
            shouldConvertToUrl: boolean;
        };
        popUp: {
            type: string;
        };
        popUpRedirectPath: {
            type: string;
        };
        state: {
            type: string;
        };
        clientId: {
            type: string;
        };
        doNotAutoRedirect: {
            type: string;
        };
        clientName: {
            type: string;
        };
    };
    oneOf: {
        required: string[];
    }[];
};
